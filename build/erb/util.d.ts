import P from "parsimmon";
export declare function alt<T extends string>(...values: T[]): P.Parser<T>;
export declare function asLine<T>(parser: P.Parser<T>): P.Parser<T>;
export declare function optional<T>(parser: P.Parser<T>): P.Parser<T | undefined>;
export declare function nest<T>(parser: P.Parser<T>): (prev: P.Parser<string>) => P.Parser<T>;
export declare function not(...exclude: string[]): P.Parser<string>;
export declare function sepBy0<T>(sep: string, parser: P.Parser<T>): P.Parser<T[]>;
export declare function sepBy1<T, U>(sep: string, first: P.Parser<T>, rest: P.Parser<U>): P.Parser<[T, ...U[]]>;
export declare function wrap<T>(left: string, right: string, parser: P.Parser<T>): P.Parser<T>;
export declare const WS0: P.Parser<null>;
export declare const WS1: P.Parser<null>;
export declare const Identifier: P.Parser<string>;
export declare const UInt: P.Parser<number>;
export declare const Int: P.Parser<number>;
export declare const Float: P.Parser<number>;
export declare const Str: P.Parser<string>;
export declare function char(...exclude: string[]): P.Parser<string>;
export declare function charSeq(...exclude: string[]): P.Parser<string>;
export declare function charSeq0(...exclude: string[]): P.Parser<string>;
export declare function arg0R0(): P.Parser<null>;
export declare function arg1R0<A0>(a0: P.Parser<A0>): P.Parser<A0 | undefined>;
export declare function arg1R1<A0>(a0: P.Parser<A0>): P.Parser<A0>;
export declare function arg2R0<A0, A1>(a0: P.Parser<A0>, a1: P.Parser<A1>): P.Parser<[A0 | undefined, A1 | undefined]>;
export declare function arg2R1<A0, A1>(a0: P.Parser<A0>, a1: P.Parser<A1>): P.Parser<[A0, A1 | undefined]>;
export declare function arg2R2<A0, A1>(a0: P.Parser<A0>, a1: P.Parser<A1>): P.Parser<[A0, A1]>;
export declare function arg3R3<A0, A1, A2>(a0: P.Parser<A0>, a1: P.Parser<A1>, a2: P.Parser<A2>): P.Parser<[A0, A1, A2]>;
export declare function arg4R1<A0, A1, A2, A3>(a0: P.Parser<A0>, a1: P.Parser<A1>, a2: P.Parser<A2>, a3: P.Parser<A3>): P.Parser<[A0, A1 | undefined, A2 | undefined, A3 | undefined]>;
export declare function arg4R2<A0, A1, A2, A3>(a0: P.Parser<A0>, a1: P.Parser<A1>, a2: P.Parser<A2>, a3: P.Parser<A3>): P.Parser<[A0, A1, A2 | undefined, A3 | undefined]>;
export declare function arg4R3<A0, A1, A2, A3>(a0: P.Parser<A0>, a1: P.Parser<A1>, a2: P.Parser<A2>, a3: P.Parser<A3>): P.Parser<[A0, A1, A2, A3 | undefined]>;
export declare function arg5R1<A0, A1, A2, A3, A4>(a0: P.Parser<A0>, a1: P.Parser<A1>, a2: P.Parser<A2>, a3: P.Parser<A3>, a4: P.Parser<A4>): P.Parser<[A0, A1 | undefined, A2 | undefined, A3 | undefined, A4 | undefined]>;
export declare function arg5R3<A0, A1, A2, A3, A4>(a0: P.Parser<A0>, a1: P.Parser<A1>, a2: P.Parser<A2>, a3: P.Parser<A3>, a4: P.Parser<A4>): P.Parser<[A0, A1, A2, A3 | undefined, A4 | undefined]>;
export declare function argNR0<AN>(an: P.Parser<AN>): P.Parser<AN[]>;
export declare function argNR1<A0, AN>(a0: P.Parser<A0>, an: P.Parser<AN>): P.Parser<[A0, ...AN[]]>;
